# REINVENT4 TOML input example for reinforcement/curriculum learning
#
#
# Curriculum learning in REINVENT4 is a multi-stage reinforcement learning
# run.  One or more stages (auto CL) can be defined.  But it is also
# possible to continue a run from any checkpoint file that is generated
# during the run (manual CL).  Currently checkpoints are written at the end
# of a run also when the run is forcefully terminated with Ctrl-C.


run_type = "staged_learning"
device = "cuda:0"  # set torch device e.g. "cpu"
tb_logdir = "tb_logs"  # name of the TensorBoard logging directory
json_out_config = "_staged_learning.json"  # write this TOML to JSON

[parameters]

# Uncomment one of the comment blocks below.  Each generator needs a model
# file and possibly a SMILES file with seed structures.  If the run is to
# be continued after termination, the agent_file would have to be replaced
# with the checkpoint file.

summary_csv_prefix = "staged_learning"  # prefix for the CSV file
use_checkpoint = false  # if true read diversity filter from agent_file
purge_memories = false  # if true purge all diversity filter memories after each stage

## Reinvent
#prior_file = "../TL/TL_reinvent.model.80.chkpt"
#agent_file = "../TL/TL_reinvent.model.80.chkpt"

## LibInvent
prior_file = "/home/zhennanfong/REINVENT4-4.5.11/priors/libinvent.prior"
agent_file = "/home/zhennanfong/REINVENT4-4.5.11/priors/libinvent.prior"
smiles_file = "48-77.smi"  # 1 scaffold per line with attachment points

## LinkInvent
#prior_file = "priors/linkinvent.prior"
#agent_file = "priors/linkinvent.prior"
#smiles_file = "warheads.smi"  # 2 warheads per line separated with '|'

## Mol2Mol
#prior_file = "/home/zhennanfong/REINVENT4-4.5.11/priors/mol2mol_medium_similarity.prior"
#agent_file = "/home/zhennanfong/REINVENT4-4.5.11/priors/mol2mol_medium_similarity.prior"
#smiles_file = "16.smi"  # 1 compound per line
#sample_strategy = "multinomial"  # multinomial or beamsearch (deterministic)
#distance_threshold = 100

## Pepinvent
#prior_file = "priors/pepinvent.prior"
#agent_file = "priors/pepinvent.prior"
#smiles_file = "pepinvent.smi"
#sample_strategy = "multinomial"  # multinomial or beamsearch (deterministic)
#distance_threshold = 100

batch_size = 64          # network

unique_sequences = true  # if true remove all duplicates raw sequences in each step
                         # only here for backward compatibility
randomize_smiles = true  # if true shuffle atoms in SMILES randomly


[learning_strategy]

type = "dap"      # dap: only one supported
sigma = 128       # sigma of the RL reward function
rate = 0.0001     # for torch.optim


[diversity_filter]  # optional, comment section out or remove if unneeded
                    # NOTE: also memorizes all seen SMILES

type = "IdenticalMurckoScaffold" # IdenticalTopologicalScaffold,
                                 # ScaffoldSimilarity, PenalizeSameSmiles
bucket_size = 25                 # memory size in number of compounds
minscore = 0.4                   # only memorize if this threshold is exceeded
minsimilarity = 0.4              # minimum similarity for ScaffoldSimilarity
penalty_multiplier = 0.5         # penalty factor for PenalizeSameSmiles


# Reinvent only: guide RL in the initial phase
#[inception]  # optional, comment sectionout or remove if unneeded

#smiles_file = "sampled.smi"  # "good" SMILES for guidance
#memory_size = 100  # number of total SMILES held in memory
#sample_size = 10  # number of SMILES randomly chosen each epoch


### Stage 1
### Note that stages must always be a list i.e. double brackets
[[stage]]

chkpt_file = 'test1.chkpt'  # name of the checkpoint file, can be reused as agent

termination = "simple"  # termination criterion fot this stage
max_score = 0.75  # terminate if this total score is exceeded
min_steps = 25  # run for at least this number of steps
max_steps = 100  # terminate entire run when exceeded

# Optionally, a DF can be set for each stage but note that the global DF
# section above will always overwrite the stage section and you need to
# delete [diversity_filter] to avoid this
#
#[stage.diversity_filter]
#type = "IdenticalMurckoScaffold"
# etc.

[stage.scoring]
type = "geometric_mean"  # aggregation function

[[stage.scoring.component]]
[stage.scoring.component.QED]
[[stage.scoring.component.QED.endpoint]]
name = "QED"
weight = 0.2

[[stage.scoring.component]]
[stage.scoring.component.Maize]
[[stage.scoring.component.Maize.endpoint]]
name = "docking with MAIZE"
weight = 0.3
params.executable = "/home/zhennanfong/mambaforge/envs/maize/bin/maize"
params.workflow = "gnina.yml"
params.config = "maize.toml"
params.log = "maize_worfklow_docking.log"
#PRIMARY_SCORE_TAG = "minimizedAffinity" has been changed to "CNNscore" in /home/zhennanfong/mambaforge/envs/maize/lib/python3.10/site-packages/maize/steps/mai/docking/gnina.py
#transform.type = "reverse_sigmoid"
#transform.high = -6
#transform.low = -13.5
#transform.k = 0.2

[[stage.scoring.component]]
# Custom alerts if a filter of unwanted groups
[stage.scoring.component.custom_alerts]
[[stage.scoring.component.custom_alerts.endpoint]]
name = "Alerts"  # user chosen name for output
# no weight because as a filter it will be applied globally
params.smarts = [
    "[*;r8]",
    "[*;r9]",
    "[*;r10]",
    "[*;r11]",
    "[*;r12]",
    "[*;r13]",
    "[*;r14]",
    "[*;r15]",
    "[*;r16]",
    "[*;r17]",
    "[#8][#8]",
    "[#6;+]",
    "[#16][#16]",
    "[#7;!n][S;!$(S(=O)=O)]",
    "[#7;!n][#7;!n]",
    "C#C",
    "C(=[O,S])[O,S]",
    "[#7;!n][C;!$(C(=[O,N])[N,O])][#16;!s]",
    "[#7;!n][C;!$(C(=[O,N])[N,O])][#7;!n]",
    "[#7;!n][C;!$(C(=[O,N])[N,O])][#8;!o]",
    "[#8;!o][C;!$(C(=[O,N])[N,O])][#16;!s]",
    "[#8;!o][C;!$(C(=[O,N])[N,O])][#8;!o]",
    "[#16;!s][C;!$(C(=[O,N])[N,O])][#16;!s]",
#custom by zhennan
    "[NH2]",
    "[OH]"
]

[[stage.scoring.component]]
[stage.scoring.component.MolecularWeight]
[[stage.scoring.component.MolecularWeight.endpoint]]
name = "MW"
weight = 0
# transforms can be used for any component if desired
transform.type = "double_sigmoid"
transform.high = 500.0
transform.low = 200.0
transform.coef_div = 500.0
transform.coef_si = 20.0
transform.coef_se = 20.0

[[stage.scoring.component]]
[stage.scoring.component.SlogP]
[[stage.scoring.component.SlogP.endpoint]]
name = "SlogP (RDKit)"
weight = 0
transform.type = "reverse_sigmoid"
transform.high = 3
transform.low = 1
transform.k = 0.5

[[stage.scoring.component]]
[stage.scoring.component.TPSA]
[[stage.scoring.component.TPSA.endpoint]]
name = "TPSA"
weight = 0
transform.type = "double_sigmoid"
transform.high = 140.0
transform.low = 0.0
transform.coef_div = 140.0
transform.coef_si = 20.0
transform.coef_se = 20.0

[[stage.scoring.component]]
[stage.scoring.component.NumAtomStereoCenters]
[[stage.scoring.component.NumAtomStereoCenters.endpoint]]
name = "Number of stereo centers"
weight = 0
transform.type = "step"
transform.high = 3
transform.low = 0

[[stage.scoring.component]]
[stage.scoring.component.HBondAcceptors]
[[stage.scoring.component.HBondAcceptors.endpoint]]
name = "Number of HB acceptors (Lipinski)"
weight = 0
transform.type = "reverse_sigmoid"
transform.high = 10
transform.low = 8
transform.k = 0.5

[[stage.scoring.component]]
[stage.scoring.component.HBondDonors]
[[stage.scoring.component.HBondDonors.endpoint]]
name = "Number of HB donors (Lipinski)"
weight = 0
transform.type = "reverse_sigmoid"
transform.high = 4
transform.low = 0
transform.k = 0.5

[[stage.scoring.component]]
[stage.scoring.component.NumRotBond]
[[stage.scoring.component.NumRotBond.endpoint]]
name = "Number of rotatable bonds"
weight = 0
transform.type = "reverse_sigmoid"
transform.high = 20
transform.low = 0
transform.k = 0.5

[[stage.scoring.component]]
[stage.scoring.component.NumHeavyAtoms]
[[stage.scoring.component.NumHeavyAtoms.endpoint]]
name = "Number of Heavy atoms"
weight = 0
transform.type = "reverse_sigmoid"
transform.high = 80
transform.low = 20
transform.k = 0.5

[[stage.scoring.component]]
[stage.scoring.component.MolVolume]
[[stage.scoring.component.MolVolume.endpoint]]
name = "Moleculer Volume (RDKit)"
weight = 0
transform.type = "double_sigmoid"
transform.high = 450.0
transform.low = 250.0
transform.coef_div = 500.0
transform.coef_si = 20.0
transform.coef_se = 20.0
#weight = 0.5
#transform.type = "reverse_sigmoid"
#transform.high = 600
#transform.low = 300
#transform.k = 0.5

# Scoring components about drug-likeness, synthesizability & reactions:
# (raw) molecule synthetic accessibility as a score between 1 (easy to make) and 10 (very difficult to make)
[[stage.scoring.component]]
[stage.scoring.component.SAScore]
[[stage.scoring.component.SAScore.endpoint]]
name = "SA score"
weight = 0
transform.type = "reverse_sigmoid"
transform.high = 10
transform.low = 0
transform.k = 0.5

[[stage.scoring.component]]
[stage.scoring.component.ExternalProcess]
[[stage.scoring.component.ExternalProcess.endpoint]]
name = "QSAR"

weight = 0.5
params.executable = "/home/zhennanfong/mambaforge/condabin/mamba"
params.args = "run --no-capture-output -p /home/zhennanfong/anaconda3/envs/qsar /home/zhennanfong/REINVENT4-4.5.11/support/run-qsartuna.py /home/zhennanfong/Desktop/ITK/REINVENT/QSAR/2/merged.pkl"

# Adjust parameters as needed
transform.type = "reverse_sigmoid"
transform.high = 0
transform.low = -50
transform.k = 0.5
